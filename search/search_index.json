{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"news.html","title":"News","text":""},{"location":"news.html#release-100-beta1","title":"Release 1.0.0-beta.1","text":"Posted August 7th, 2025 <p>This beta release reorganizes some module functions and reworks the window for better general functionality.</p> <ul> <li>Added Lime.GetVersion, which retrieves the version of Lime running.</li> <li>Moved some World functions to Lime:  <ul> <li>Lime.GetFrameRate</li> <li>Lime.SetFrameRate</li> <li>Lime.GetMemoryUsage</li> </ul> </li> <li>Reworked Lime.SetWindowSize to work post-window creation, resizes from center.</li> <li>Added Lime.SetMatchResolutionToSize which enables/disables matching the Irrlicht rendering resolution to the window size on resizing, defaulting to <code>true</code>.</li> <li>Maximizing the Lime window now fully covers the screen, with the top bar and task bar hidden.</li> <li>Added Lime.SetAutoAspectRatio, which locks the window's aspect ratio on resize if enabled.</li> <li>Added Input.GetMouseDelta, which returns the physical change in mouse position since the last frame, disregarding Input.SetMousePosition.</li> </ul>"},{"location":"api/runtime.html","title":"Runtime","text":""},{"location":"api/structs.html","title":"Structures","text":"<p>Download this page as a Lua table here. Structs make it easy to know exactly what fields and types are expected as parameters. See below:   </p> <pre><code>    local structs = require(\"structures\")\n    Lime.SetDriverType(structs.DRIVER_TYPE.DIRECT3D9) -- 4\n</code></pre>"},{"location":"api/structs.html#driver_type","title":"DRIVER_TYPE","text":"<pre><code>    NULL = 0\n    SOFTWARE = 1\n    BURNINGSVIDEO = 2\n    DIRECT3D8 = 3\n    DIRECT3D9 = 4\n    OPENGL = 5\n    COUNT = 6\n</code></pre>"},{"location":"api/structs.html#fog_type","title":"FOG_TYPE","text":"<pre><code>    EXP = 0\n    LINEAR = 1\n    EXP2 = 2\n</code></pre>"},{"location":"api/structs.html#hardware_mapping_hint","title":"HARDWARE_MAPPING_HINT","text":"<pre><code>    NEVER = 0\n    STATIC = 1\n    DYNAMIC = 2\n    STREAM = 3\n</code></pre>"},{"location":"api/structs.html#material_flag","title":"MATERIAL_FLAG","text":"<pre><code>    WIREFRAME = 0x1\n    POINTCLOUD = 0x2\n    GOURAUD_SHADING = 0x4\n    LIGHTING = 0x8\n    ZBUFFER = 0x10\n    ZWRITE_ENABLE = 0x20\n    BACK_FACE_CULLING = 0x40\n    FRONT_FACE_CULLING = 0x80\n    BILINEAR_FILTER = 0x100\n    TRILINEAR_FILTER = 0x200\n    ANISOTROPIC_FILTER = 0x400\n    FOG_ENABLE = 0x800\n    NORMALIZE_NORMALS = 0x1000\n    TEXTURE_WRAP = 0x2000\n    ANTI_ALIASING = 0x4000\n    COLOR_MASK = 0x8000\n    COLOR_MATERIAL = 0x10000\n    USE_MIP_MAPS = 0x20000\n    BLEND_OPERATION = 0x40000\n    POLYGON_OFFSET = 0x80000\n</code></pre>"},{"location":"api/structs.html#material_type","title":"MATERIAL_TYPE","text":"<pre><code>    SOLID = 0\n    SOLID_2_LAYER = 1\n    LIGHTMAP = 2\n    LIGHTMAP_ADD = 3\n    LIGHTMAP_M2 = 4\n    LIGHTMAP_M4 = 5\n    LIGHTMAP_LIGHTING = 6\n    LIGHTMAP_LIGHTING_M2 = 7\n    LIGHTMAP_LIGHTING_M4 = 8\n    DETAIL_MAP = 9\n    SPHERE_MAP = 10\n    REFLECTION_2_LAYER = 11\n    TRANSPARENT_ADD_COLOR = 12\n    TRANSPARENT_ALPHA_CHANNEL = 13\n    TRANSPARENT_ALPHA_CHANNEL_REF = 14\n    TRANSPARENT_VERTEX_ALPHA = 15\n    TRANSPARENT_REFLECTION_2_LAYER = 16\n    NORMAL_MAP_SOLID = 17\n    NORMAL_MAP_TRANSPARENT_ADD_COLOR = 18\n    NORMAL_MAP_TRANSPARENT_VERTEX_ALPHA = 19\n    PARALLAX_MAP_SOLID = 20\n    PARALLAX_MAP_TRANSPARENT_ADD_COLOR = 21\n    PARALLAX_MAP_TRANSPARENT_VERTEX_ALPHA = 22\n    ONETEXTURE_BLEND = 23\n    FORCE_32BIT = 24\n</code></pre>"},{"location":"api/structs.html#color_material","title":"COLOR_MATERIAL","text":"<pre><code>    NONE = 0\n    DIFFUSE = 1\n    AMBIENT = 2\n    EMISSIVE = 3\n    SPECULAR = 4\n    DIFFUSE_AND_AMBIENT = 5\n</code></pre>"},{"location":"api/structs.html#render_target","title":"RENDER_TARGET","text":"<pre><code>    FRAME_BUFFER = 0\n    RENDER_TEXTURE = 1\n    MULTI_RENDER_TEXTURES = 2\n    STEREO_LEFT_BUFFER = 3\n    STEREO_RIGHT_BUFFER = 4\n    STEREO_BOTH_BUFFERS = 5\n    AUX_BUFFER0 = 6\n    AUX_BUFFER1 = 7\n    AUX_BUFFER2 = 8\n    AUX_BUFFER3 = 9\n    AUX_BUFFER4 = 10\n</code></pre>"},{"location":"api/structs.html#shadow_filter_sampling","title":"SHADOW_FILTER_SAMPLING","text":"<pre><code>    NONE = 0\n    SAMPLING_4 = 1\n    SAMPLING_8 = 2\n    SAMPLING_12 = 3\n    SAMPLING_16 = 4\n    COUNT = 5 -- ?\n</code></pre>"},{"location":"api/structs.html#shadow_mode","title":"SHADOW_MODE","text":"<pre><code>    RECEIVE = 0\n    CAST = 1\n    BOTH = 2\n    COUNT = 3\n    NONE = 4\n</code></pre>"},{"location":"api/structs.html#shadow_resolution","title":"SHADOW_RESOLUTION","text":"<pre><code>    RES_256 = 0\n    RES_512 = 1\n    RES_1024 = 2\n    RES_2048 = 3\n    RES_4096 = 4\n</code></pre>"},{"location":"api/structs.html#texture_clamp","title":"TEXTURE_CLAMP","text":"<pre><code>    REPEAT = 0\n    CLAMP = 1\n    CLAMP_TO_EDGE = 2\n    CLAMP_TO_BORDER = 3\n    MIRROR = 4\n    MIRROR_CLAMP = 5\n    MIRROR_CLAMP_TO_EDGE = 6\n    MIRROR_CLAMP_TO_BORDER = 7\n</code></pre>"},{"location":"api/structs.html#texture_creation_flag","title":"TEXTURE_CREATION_FLAG","text":"<pre><code>    ALWAYS_16_BIT = 0\n    ALWAYS_32_BIT = 1\n    OPTIMIZED_FOR_QUALITY = 2\n    OPTIMIZED_FOR_SPEED = 3\n    CREATE_MIP_MAPS = 4\n    NO_ALPHA_CHANNEL = 5\n    ALLOW_NON_POWER_2 = 6\n</code></pre>"},{"location":"api/structs.html#anti_aliasing_mode","title":"ANTI_ALIASING_MODE","text":"<pre><code>    OFF = 0\n    SIMPLE = 1\n    QUALITY = 2\n    LINE_SMOOTH = 3\n    POINT_SMOOTH = 4\n    FULL_BASIC = 5\n    ALPHA_TO_COVERAGE = 6\n</code></pre>"},{"location":"api/structs.html#color_plane","title":"COLOR_PLANE","text":"<pre><code>    NONE = 0\n    ALPHA = 1\n    RED = 2\n    GREEN = 3\n    BLUE = 4\n    RGB = 5\n    ALL = 6\n</code></pre>"},{"location":"api/structs.html#comparison_func","title":"COMPARISON_FUNC","text":"<pre><code>    NEVER = 0\n    LESSEQUAL = 1\n    EQUAL = 2\n    NOTEQUAL = 3\n    GREATEREQUAL = 4\n    GREATER = 5\n    ALWAYS = 6\n</code></pre>"},{"location":"api/structs.html#polygon_offset","title":"POLYGON_OFFSET","text":"<pre><code>    BACK = 0\n    FRONT = 1\n</code></pre>"},{"location":"api/structs.html#transform_type","title":"TRANSFORM_TYPE","text":"<pre><code>    POSITION = 0\n    ROTATION = 1\n    SCALE = 2\n</code></pre>"},{"location":"api/structs.html#blend_operation","title":"BLEND_OPERATION","text":"<pre><code>    NONE = 0\n    ADD = 1\n    SUBTRACT = 2\n    REVSUBTRACT = 3\n    MIN = 4\n    MAX = 5\n    MIN_FACTOR = 6\n    MAX_FACTOR = 7\n    MIN_ALPHA = 8\n    MAX_ALPHA = 9\n</code></pre>"},{"location":"api/structs.html#legacy_light_type","title":"LEGACY_LIGHT_TYPE","text":"<pre><code>    POINT = 0\n    SPOT = 1\n    DIRECTIONAL = 2\n</code></pre>"},{"location":"api/structs.html#light_management_mode","title":"LIGHT_MANAGEMENT_MODE","text":"<pre><code>    DISTANCE_TO_CAMERA = 0\n    NEAREST_TO_OBJECTS = 1\n    ZONE = 2\n</code></pre>"},{"location":"api/structs.html#particle_affector_type","title":"PARTICLE_AFFECTOR_TYPE","text":"<pre><code>    ATTRACT = 0\n    FADE_OUT = 1\n    GRAVITY = 2\n    ROTATION = 3\n    SCALE = 4\n</code></pre>"},{"location":"api/structs.html#particle_emitter_type","title":"PARTICLE_EMITTER_TYPE","text":"<pre><code>    POINT = 0\n    CUBE = 1\n    SPHERE = 2\n    RING = 3\n</code></pre>"},{"location":"api/structs.html#data_type","title":"DATA_TYPE","text":"<pre><code>    BYTE = 0\n    SHORT = 1\n    INTEGER = 2\n    FLOAT = 3\n    STRING = 4\n    FILE = 5\n</code></pre>"},{"location":"api/structs.html#message_icon","title":"MESSAGE_ICON","text":"<pre><code>    OK = 0\n    MESSAGE = 1\n    WARNING = 2\n    INFORMATION = 3\n</code></pre>"},{"location":"api/structs.html#peer_state","title":"PEER_STATE","text":"<pre><code>    DISCONNECTED = 0\n    CONNECTING = 1\n    ACKNOWLEDGING_CONNECT = 2\n    CONNECTION_PENDING = 3\n    CONNECTION_SUCCEEDED = 4\n    CONNECTED = 5\n    DISCONNECT_LATER = 6\n    DISCONNECTING = 7\n    ACKNOWLEDGING_DISCONNECT = 8\n    ZOMBIE = 9\n</code></pre>"},{"location":"api/structs.html#sound_effect","title":"SOUND_EFFECT","text":"<pre><code>    DISTORTION = 0\n    ECHO = 1\n    REVERB = 2\n</code></pre>"},{"location":"api/structs.html#alignment_type","title":"ALIGNMENT_TYPE","text":"<pre><code>    LEFT = 0\n    RIGHT = 1\n    CENTER = 2\n</code></pre>"},{"location":"api/structs.html#anchor_type","title":"ANCHOR_TYPE","text":"<pre><code>    TOP_LEFT = 0\n    TOP_CENTER = 1\n    TOP_RIGHT = 2\n    CENTER_LEFT = 3\n    CENTER = 4\n    CENTER_RIGHT = 5\n    BOTTOM_LEFT = 6\n    BOTTOM_CENTER = 7\n    BOTTOM_RIGHT = 8\n</code></pre>"},{"location":"api/structs.html#gui_alignment","title":"GUI_ALIGNMENT","text":"<pre><code>    UPPER_LEFT = 0\n    LOWER_RIGHT = 1\n    CENTER = 2\n    SCALE = 3\n</code></pre>"},{"location":"api/structs.html#trail_alignment_type","title":"TRAIL_ALIGNMENT_TYPE","text":"<pre><code>    CAMERA_X_AXIS = 0\n    CAMERA_Y_AXIS = 1\n    GLOBAL_X_AXIS = 2\n    GLOBAL_Y_AXIS = 3\n    GLOBAL_Z_AXIS = 4\n    PARENT_X_AXIS = 5\n    PARENT_Y_AXIS = 6\n    PARENT_Z_AXIS = 7\n</code></pre>"},{"location":"api/structs.html#key_code","title":"KEY_CODE","text":"<pre><code>    LBUTTON = 0\n    RBUTTON = 1\n    CANCEL = 2\n    MBUTTON = 3\n    XBUTTON1 = 4\n    XBUTTON2 = 5\n    BACK = 8\n    TAB = 9\n    CLEAR = 12\n    RETURN = 13\n    SHIFT = 16\n    CONTROL = 17\n    MENU = 18\n    PAUSE = 19\n    CAPITAL = 20\n    KANA = 21\n    HANGUEL = 21\n    HANGUL = 21\n    JUNJA = 23\n    FINAL = 24\n    HANJA = 25\n    KANJI = 25\n    ESCAPE = 27\n    CONVERT = 28\n    NONCONVERT = 29\n    ACCEPT = 30\n    MODECHANGE = 31\n    SPACE = 32\n    PRIOR = 33\n    NEXT = 34\n    END = 35\n    HOME = 36\n    LEFT = 37\n    UP = 38\n    RIGHT = 39\n    DOWN = 40\n    SELECT = 41\n    PRINT = 42\n    EXECUT = 43\n    SNAPSHOT = 44\n    INSERT = 45\n    DELETE = 46\n    HELP = 47\n    KEY_0 = 48\n    KEY_1 = 49\n    KEY_2 = 50\n    KEY_3 = 51\n    KEY_4 = 52\n    KEY_5 = 53\n    KEY_6 = 54\n    KEY_7 = 55\n    KEY_8 = 56\n    KEY_9 = 57\n    A = 65\n    B = 66\n    C = 67\n    D = 68\n    E = 69\n    F = 70\n    G = 71\n    H = 72\n    I = 73\n    J = 74\n    K = 75\n    L = 76\n    M = 77\n    N = 78\n    O = 79\n    P = 80\n    Q = 81\n    R = 82\n    S = 83\n    T = 84\n    U = 85\n    V = 86\n    W = 87\n    X = 88\n    Y = 89\n    Z = 90\n    LWIN = 91\n    RWIN = 92\n    APPS = 93\n    SLEEP = 95\n    NUMPAD0 = 96\n    NUMPAD1 = 97\n    NUMPAD2 = 98\n    NUMPAD3 = 99\n    NUMPAD4 = 100\n    NUMPAD5 = 101\n    NUMPAD6 = 102\n    NUMPAD7 = 103\n    NUMPAD8 = 104\n    NUMPAD9 = 105\n    MULTIPLY = 106\n    ADD = 107\n    SEPARATOR = 108\n    SUBTRACT = 109\n    DECIMAL = 110\n    DIVIDE = 111\n    F1 = 112\n    F2 = 113\n    F3 = 114\n    F4 = 115\n    F5 = 116\n    F6 = 117\n    F7 = 118\n    F8 = 119\n    F9 = 120\n    F10 = 121\n    F11 = 122\n    F12 = 123\n    NUMLOCK = 144\n    SCROLL = 145\n    LSHIFT = 160\n    RSHIFT = 161\n    LCONTROL = 162\n    RCONTROL = 163\n    LMENU = 164\n    RMENU = 165\n    OEM_1 = 186\n    PLUS = 187\n    COMMA = 188\n    MINUS = 189\n    PERIOD = 190\n    OEM_2 = 191\n    OEM_3 = 192\n    OEM_4 = 219\n    OEM_5 = 220\n    OEM_6 = 221\n    OEM_7 = 222\n    OEM_8 = 223\n    OEM_AX = 225\n    OEM_102 = 226\n    ATTN = 246\n    CRSEL = 247\n    EXSEL = 248\n    EREOF = 249\n    PLAY = 250\n    ZOOM = 251\n    PA1 = 252\n    OEM_CLEAR = 254\n    CODES_COUNT = 255\n</code></pre>"},{"location":"api/structs.html#mouse_code","title":"MOUSE_CODE","text":"<pre><code>    LEFT = 0\n    RIGHT = 1\n    MIDDLE = 2\n</code></pre>"},{"location":"api/classes/packet.html","title":"Packet","text":"ConstructorsAlterablesFunctions Function Description Packet.new() Creates a new, empty packet Property Type Description .ID int Sender ID (peer ID or server) .position int Current byte position used by <code>:getNext()</code> Function Returns Description :append(int <code>dataType</code>, <code>data</code>) Appends data of type <code>dataType</code> to the packet. See [DATA_TYPE][data_type]. For <code>FILE</code>, <code>data</code> should be a file path. :get(int <code>dataType</code>, int <code>bytePosition</code>) any Retrieves data of the specified type at the given byte position :getNext(int <code>dataType</code>) any Retrieves data at the current position and advances <code>.position</code> by <code>dataType</code> size :getSize() int Returns the size of the packet in bits :destroy() Destroys the packet :writeToFile(int <code>bytePosition</code>, String <code>path</code>) Writes data from <code>bytePosition</code> to <code>path</code>"},{"location":"api/classes/texture.html","title":"Texture","text":"ConstructorsFunctions Function Description Texture.new() Creates an empty texture Texture.new(String <code>path</code>) Loads a texture from a file path Texture.new(Vector2D <code>size</code>) Creates a blank texture with specified size Function Returns Description :load(String <code>path</code>) Loads a texture from the given path :toStr() String Returns the texture's path as a string :keyColor(Vector2D <code>position</code>) Keys the color at the given position into transparency :save(String <code>path</code>) Saves the texture to the specified file path :clear(Vector2D <code>size</code>) Clears the texture and creates a blank one of the given size :append(Texture <code>texture</code>, Vector2D <code>position</code>) Appends another texture at the given position :appendFromFile(String <code>filePath</code>, Vector2D <code>position</code>) Appends texture data from file at the given position :getPixelColor(Vector2D <code>position</code>) Vector4D Returns the color at the specified pixel position"},{"location":"api/classes/vector2d.html","title":"Vector2D","text":"ConstructorsOperationsFunctions Function Description Vector2D.new() Creates a default Vector2D (0, 0) Vector2D.new(float <code>x</code>, float <code>y</code>) Creates a Vector2D with <code>x</code> and <code>y</code> components Vector2D.new(float <code>x</code>) Creates a Vector2D with both components set to <code>x</code> Operator Description <code>==</code> Checks equality between two Vector2D objects <code>+</code> Adds two Vector2D objects <code>-</code> Subtracts one Vector2D from another <code>*</code> Multiplies a Vector2D by a scalar <code>/</code> Divides a Vector2D by a scalar Function Returns Description :length() float Returns the length (magnitude) of the Vector2D :normalize() Vector2D Returns a normalized Vector2D in range [0, 1] :normalizeToRange(float <code>x</code>, float <code>y</code>) Vector2D Returns a Vector2D normalized to the range [<code>x</code>, <code>y</code>] :dot(Vector2D <code>x</code>) float Returns the dot product with vector <code>x</code> :rotate(float <code>x</code>) Vector2D Returns the vector rotated by <code>x</code> radians :angle(Vector2D <code>x</code>) float Returns the angle between this vector and <code>x</code> :distance(Vector2D <code>x</code>) float Returns the distance between this vector and <code>x</code> :toStr() String Returns a string representation of the vector"},{"location":"api/classes/vector3d.html","title":"Vector3D","text":"ConstructorsOperationsFunctions Function Description Vector3D.new() Creates a default Vector3D (0, 0, 0) Vector3D.new(float <code>x</code>, float <code>y</code>, float <code>z</code>) Creates a Vector3D with <code>x</code>, <code>y</code>, and <code>z</code> components Vector3D.new(float <code>x</code>) Creates a Vector3D with all components set to <code>x</code> Operator Description <code>==</code> Checks equality between two Vector3D objects <code>+</code> Adds two Vector3D objects <code>-</code> Subtracts one Vector3D from another <code>*</code> Multiplies a Vector3D by a scalar <code>/</code> Divides a Vector3D by a scalar Function Returns Description :length() float Returns the length (magnitude) of the Vector3D :normalize() Vector3D Returns a normalized Vector3D in range [0, 1] :normalizeToRange(float <code>x</code>, float <code>y</code>) Vector3D Returns a Vector3D normalized to the range [<code>x</code>, <code>y</code>] :dot(Vector3D <code>x</code>) float Returns the dot product with vector <code>x</code> :rotate(Vector3D <code>x</code>) Vector3D Returns the vector rotated by vector <code>x</code> (in radians) :angle(Vector3D <code>x</code>) float Returns the angle (in radians) between this vector and <code>x</code> :distance(Vector3D <code>x</code>) float Returns the distance between this vector and <code>x</code> :toDegrees() Vector3D Converts the vector from radians to degrees :toRadians() Vector3D Converts the vector from degrees to radians :toStr() String Returns a string representation of the vector"},{"location":"api/classes/vector4d.html","title":"Vector4D","text":"ConstructorsOperationsFunctions Function Description Vector4D.new() Creates a default Vector4D (0, 0, 0, 0) Vector4D.new(float <code>x</code>, float <code>y</code>, float <code>z</code>, float <code>w</code>) Creates a Vector4D with components <code>x</code>, <code>y</code>, <code>z</code>, and <code>w</code> Vector4D.new(float <code>x</code>) Creates a Vector4D with all components set to <code>x</code> Operator Description <code>==</code> Checks equality between two Vector4D objects <code>+</code> Adds two Vector4D objects <code>-</code> Subtracts one Vector4D from another <code>*</code> Multiplies a Vector4D by a scalar <code>/</code> Divides a Vector4D by a scalar Function Returns Description :toStr() String Returns a string representation of the vector"},{"location":"api/classes/2d/editbox.html","title":"EditBox","text":"ConstructorsAlterablesFunctions Function Description EditBox.new() Creates a default EditBox EditBox.new(String <code>text</code>) Creates an EditBox with initial text EditBox.new(String <code>text</code>, Vector2D <code>position</code>) Creates an EditBox at <code>position</code> with text EditBox.new(String <code>text</code>, Vector2D <code>position</code>, Vector2D <code>dimensions</code>) Creates an EditBox at <code>position</code> with text and size Property Type Description .position Vector2D EditBox position .text String Text content .visible bool EditBox visibility .size Vector2D Copy of EditBox size .wrap bool Enable/disable word wrap .textColor Vector4D Text color .drawBorder bool Draw text box border .focused bool Whether the EditBox is focused .enabled bool Enable or disable the EditBox .password bool Obfuscate text like a password field .multiLine bool Allow multiline input .autoScroll bool Autoscroll to follow user input Function Returns Description :destroy() Destroys the object :setFont() Sets the font to use :setMaxSize() Sets the max visible size of the EditBox; crops beyond it :toFront() Moves the EditBox to the top of the z-order :toBack() Moves the EditBox to the back of the z-order :setBorderAlignment(int <code>left</code>, int <code>right</code>, int <code>top</code>, int <code>bottom</code>) Sets border alignment, see [GUI_ALIGNMENT][gui_alignment] :setParent(Image2D <code>image</code>) Parents this EditBox to the given image"},{"location":"api/classes/2d/image2d.html","title":"Image2D","text":"ConstructorsAlterablesFunctions Function Description Image2D.new(Texture <code>texture</code>) Creates an image from a texture Image2D.new(Texture <code>texture</code>, Vector2D <code>position</code>) Creates an image with texture and position Image2D.new(Texture <code>texture</code>, Vector2D <code>position</code>, Vector2D <code>size</code>) Creates an image with texture, position, and size Image2D.new(Image2D <code>other</code>) Creates a copy of another Image2D Property Type Description .position Vector2D Image position .visible bool Image visibility .size Vector2D Image size .scaleToFit bool Scale image to fit (May need verification if functional) .color Vector4D Image color .hovered bool True if mouse is over the image .pressed bool True if image is being pressed Function Returns Description :load(Texture <code>texture</code>) Loads a new texture :destroy() Destroys the object :setMaxSize(Vector2D <code>maxSize</code>) Sets max display size; crops image beyond <code>maxSize</code> :toFront() Moves image to the top of the z-order :toBack() Moves image to the back of the z-order :setBorderAlignment(int <code>left</code>, int <code>right</code>, int <code>top</code>, int <code>bottom</code>) Sets image border alignment, see [GUI_ALIGNMENT][gui_alignment] :setParent(Image2D <code>other</code>) Parents this image to another <code>Image2D</code> :fireOnClick(Function <code>f</code>) Binds function <code>f</code>, called with a bool when image is pressed/released :fireOnHover(Function <code>f</code>) Binds function <code>f</code>, called with a bool when mouse hovers/unhovers"},{"location":"api/classes/2d/text2d.html","title":"Text2D","text":"ConstructorsAlterablesFunctions Function Description Text2D.new() Creates an empty Text2D Text2D.new(String <code>text</code>) Creates a Text2D with initial text Text2D.new(String <code>text</code>, Vector2D <code>position</code>) Creates a Text2D at <code>position</code> with text Text2D.new(String <code>text</code>, Vector2D <code>position</code>, Vector2D <code>dimensions</code>) Creates a Text2D at <code>position</code> with text and dimensions Property Type Description .position Vector2D Text2D position .text String Text content .visible bool Text2D visibility .size Vector2D Copy of Text2D size .wrap bool Enable/disable word wrap .textColor Vector4D Text color .backgroundColor Vector4D Background color .drawBorder bool Draw text box border .hovered bool True if mouse is over the text .pressed bool True if text is being pressed Function Returns Description :destroy() Destroys the object :setFont() Sets the font to use :setMaxSize() Sets the max visible size; crops beyond it :toFront() Moves the Text2D to the top of the z-order :toBack() Moves the Text2D to the back of the z-order :setBorderAlignment(int <code>left</code>, int <code>right</code>, int <code>top</code>, int <code>bottom</code>) Sets border alignment, see GUI_ALIGNMENT :setParent(Image2D <code>image</code>) Parents this Text2D to the given image :fireOnClick(Function <code>f</code>) Binds function <code>f</code> with a bool indicating press/release :fireOnHover(Function <code>f</code>) Binds function <code>f</code> with a bool indicating hover/unhover"},{"location":"api/classes/3d/billboard.html","title":"Billboard","text":"ConstructorsAlterablesFunctions Function Description Billboard.new() Creates an empty billboard Billboard.new(Billboard <code>other</code>) Creates a copy of another billboard Billboard.new(Material <code>material</code>) Creates a billboard using the given material Property Type Description .position Vector3D Billboard position .size Vector2D Billboard size .yPivot float Vertical pivot point of the billboard .lockAxis Vector3D Lock axis from rotating (each axis uses a bool value) .visible bool Billboard visibility Function Returns Description :loadMaterial(Material <code>material</code>) Loads a material into the billboard :destroy() Destroys the billboard :setParent(3DObject <code>other</code>) Parents this billboard to another 3D object :getAbsolutePosition() Vector3D Returns world-space position :getAbsoluteRotation() Vector3D Returns world-space rotation :getAbsoluteScale() Vector3D Returns world-space scale :updateAbsolutePosition() Updates world transform (non-recursive)"},{"location":"api/classes/3d/camera.html","title":"Camera","text":"ConstructorsAlterablesFunctions Function Description Camera.new() Creates a default camera Camera.new(Camera <code>x</code>) Creates a copy of camera <code>x</code> Property Type Description .position Vector3D Camera position .rotation Vector3D Camera rotation .viewPlanes Vector2D Near and far view planes .orthogonal bool Is the Camera orthogonal .fieldOfView float Set/get the field of view (degrees); for orthogonal cameras, .fieldOfView acts as a zoom scalar .visible bool Set/get camera visibility .aspectRatio float Camera aspect ratio .up Vector3D Camera up vector Function Returns Description :getForward() Vector3D Returns the camera's forward direction :getLeft() Vector3D Returns the camera's left direction :getAbsolutePosition() Vector3D Returns the world position :setActive() Sets this camera as the active camera :queue(bool <code>legacy</code>) Queues this camera to render on top of the active one; <code>legacy</code> determines if xEffects are used :destroy() Destroys the object"},{"location":"api/classes/3d/empty.html","title":"Empty","text":"ConstructorsAlterablesFunctions Function Description Empty.new() Creates an empty object Empty.new(Vector3D <code>position</code>) Creates an empty object at <code>position</code> Empty.new(Vector3D <code>position</code>, Vector3D <code>rotation</code>) Creates an empty object at <code>position</code> with <code>rotation</code> Empty.new(Vector3D <code>position</code>, Vector3D <code>rotation</code>, Vector3D <code>scale</code>) Creates an empty object with full transform Property Type Description .position Vector3D Object position .rotation Vector3D Object rotation .scale Vector3D Object scale .visible bool Object visibility .debug bool Enable/disable debug visualization Function Returns Description :destroy() Destroys the object :setParent(3DObject <code>other</code>) Parents this object to another 3D object :getBoundingBox() Lua table Returns bounding box info: { min = Vector3D, max = Vector3D } :getAbsolutePosition() Vector3D Returns world-space position :getAbsoluteRotation() Vector3D Returns world-space rotation :getAbsoluteScale() Vector3D Returns world-space scale :updateAbsolutePosition() Updates world transform (non-recursive)"},{"location":"api/classes/3d/hitbox.html","title":"Hitbox","text":"ConstructorsAlterables Function Description Hitbox.new() Creates an empty capsule-shaped hitbox Hitbox.new(float <code>radius</code>, float <code>height</code>) Creates a capsule hitbox with given radius and height Hitbox.new(Hitbox <code>other</code>) Creates a copy of another hitbox Property Type Description .position Vector3D Hitbox position .rotation Vector3D Hitbox rotation .active bool Whether the hitbox is active for overlap detection and ray collision .debug bool Show debug visuals; yellow = active, blue = inactive .levelOfDetail int Debug visual quality (<code>0</code> = low, <code>1</code> = medium, <code>2</code> = high) \u2014 may be bugged .collision bool Enable raypick collision .ID int Hitbox ID .radius float Capsule radius .height float Capsule height .attributes Vector2D Radius and height packed into a Vector2D"},{"location":"api/classes/3d/legacylight.html","title":"LegacyLight","text":"<p>Note: This class is only compatible with Legacy Drawing.</p> ConstructorsAlterablesFunctions Function Description LegacyLight.new() Creates a default legacy light LegacyLight.new(LegacyLight <code>other</code>) Creates a copy of another legacy light LegacyLight.new(int <code>type</code>) Creates a light of specified type, see LEGACY_LIGHT_TYPE LegacyLight.new(Vector3D <code>position</code>) Creates a light at the specified <code>position</code> LegacyLight.new(int <code>type</code>, Vector3D <code>position</code>, Vector3D <code>rotation</code>, Vector4D <code>color</code>) Full constructor with type, transform, and color Property Type Description .position Vector3D Light position .rotation Vector3D Light rotation .type int Light type; see LEGACY_LIGHT_TYPE .radius float Light radius .cones Vector2D Inner and outer cone angles .attenuation Vector3D Attenuation factors (constant, linear, quadratic) .falloff float Light falloff intensity .diffuseColor Vector4D Diffuse (main) color .ambientColor Vector4D Ambient color .specularColor Vector4D Specular highlight color .debug bool Enable/disable debug visualization .active bool Whether the light is active in rendering Function Returns Description :destroy() Destroys the object :setParent(3DObject <code>other</code>) Parents this light to another 3D object :getAbsolutePosition() Vector3D Returns world position :getAbsoluteRotation() Vector3D Returns world rotation :getAbsoluteScale() Vector3D Returns world scale :updateAbsolutePosition() Updates world transform (non-recursive)"},{"location":"api/classes/3d/light.html","title":"Light","text":"<p>Note: This class is incompatible with Legacy Drawing.</p> ConstructorsAlterablesFunctions Function Description Light.new() Creates a default light Light.new(Vector3D <code>position</code>, Vector3D <code>rotation</code>, Vector4D <code>color</code>) Creates a light at <code>position</code> with <code>rotation</code> and <code>color</code> Light.new(Vector3D <code>position</code>, Vector3D <code>rotation</code>, Vector4D <code>color</code>, Vector2D <code>shadowPrecision</code>, float <code>fieldOfView</code>, bool <code>directional</code>) Creates a light with full configuration including shadow precision and directionality Property Type Description .position Vector3D Light position .rotation Vector3D Light rotation .color Vector4D Light color .debug bool Show debug data .precisionPlanes Vector2D Shadow depth precision \u2014 closer values yield better results .fieldOfView float Field of view angle (affects light projection) .directional bool Whether the light is directional .active bool Whether the light is active in rendering Function Returns Description :destroy() Destroys the object :setParent(3DObject <code>other</code>) Parents this light to another 3D object :getAbsolutePosition() Vector3D Returns world position :getAbsoluteRotation() Vector3D Returns world rotation :getAbsoluteScale() Vector3D Returns world scale :updateAbsolutePosition() Updates world transform (non-recursive)"},{"location":"api/classes/3d/material.html","title":"Material","text":"ConstructorsAlterablesFunctions Function Description Material.new() Creates a blank material Material.new(Texture <code>texture</code>) Creates a material with an initial texture Material.new(Material <code>other</code>) Creates a copy of another material Property Type Description .type int Material type .fog bool Enable/disable fog .backfaceCulling bool Enable/disable backface culling .frontfaceCulling bool Enable/disable frontface culling .antiAliasing int Anti-aliasing mode .wireframe bool Render in wireframe mode .diffuseColor Vector4D Diffuse color .emissiveColor Vector4D Emissive color .specularColor Vector4D Specular color .gouradShading bool Enable/disable Gouraud shading .zWrite bool Enable/disable Z-buffer writing .zComparison int Z-buffer comparison mode .pointCloud bool Enable point cloud rendering .bilinearFiltering bool Enable bilinear filtering .trilinearFiltering bool Enable trilinear filtering .anisotropicFiltering bool Enable anisotropic filtering .shininess float Shininess factor .lighting bool Enable lighting (Legacy Drawing Only) .mipmaps bool Enable mipmapping .ID int Material ID Function Returns Description :getTextureTranslation(int <code>layer</code>) Vector2D Returns the UV offset for the specified texture layer :setTextureTranslation(Vector2D <code>offset</code>, int <code>layer</code>) Sets the UV offset for the specified texture layer :getTextureScale(int <code>layer</code>) Vector2D Returns the texture scale for the given layer (currently always returns an empty vector) :setTextureScale(Vector2D <code>scaling</code>, int <code>layer</code>) Sets the texture scaling for the specified layer :setTextureUVWrapping(int <code>layer</code>, int <code>type</code>) Sets wrapping type for U and V axes :setTextureUWrapping(int <code>layer</code>, int <code>type</code>) Sets U-axis texture wrapping :setTextureVWrapping(int <code>layer</code>, int <code>type</code>) Sets V-axis texture wrapping :setTexture(Texture <code>texture</code>, int <code>slot</code>) Sets the texture for the given slot :setMaterialFlag(int <code>flag</code>, bool <code>enable</code>) Enables or disables a material flag, see MATERIAL_FLAG"},{"location":"api/classes/3d/mesh.html","title":"Mesh","text":"ConstructorsAlterablesFunctions Function Description Mesh.new() Creates an empty mesh Mesh.new(String <code>meshPath</code>) Loads a mesh from <code>path</code> Mesh.new(Mesh <code>other</code>) Creates a copy of another mesh Property Type Description .position Vector3D Mesh position .rotation Vector3D Mesh rotation .scale Vector3D Mesh scale .visible bool Mesh visibility .ID int Mesh ID (defaults to -1; intended to change to positive int for optimization) .collision bool Enable/disable collision .frame int Frame of animation .debug bool Enable/disable debug data .vertexColor Vector4D Vertex color; use <code>EMT_TRANSPARENT_VERTEX_ALPHA</code> to apply alpha blending .shadows int Enable shadows (legacy only); see SHADOW_MODE Function Returns Description :load(String <code>path</code>) Loads a mesh from <code>path</code> :loadFromBuffer(MeshBuffer <code>buffer</code>) Loads mesh data from a mesh buffer :loadMaterial(Material <code>material</code>, int <code>slot</code>) Loads <code>material</code> into <code>slot</code> index :destroy() Destroys the object :writeToFile(String <code>path</code>) Exports mesh in COLLADA format to <code>path</code> :getVertexCount() int Returns the number of vertices in the mesh :getMaterialCount() int Returns the number of material slots :toStr() String Returns the mesh path as a String :getBoneDataByName(String <code>name</code>) Lua table Returns bone data for the bone with the given name: <code>lua\\n{\\n  name = String,\\n  rotation = Vector3D,\\n  headPosition = Vector3D,\\n  tailPosition = Vector3D,\\n  length = float\\n}</code> :getBoneDataByIndex(int <code>index</code>) Lua table Identical to <code>:getBoneDataByName</code> but uses an index :getBoundingBox() Lua table Returns bounding box data:<code>lua\\n{\\n  min = Vector3D,\\n  max = Vector3D\\n}</code> :getFrameCount() int Returns number of animation frames :normalizeNormals(bool <code>enable</code>) Enables/disables normal normalization :toPlanarMapping() Applies planar UV mapping to the mesh :setHardwareMappingHint(int <code>hint</code>) Sets hardware mapping strategy. See HARDWARE_MAPPING_HINT:\u2022 <code>Never</code> \u2013 Do not store on hardware\u2022 <code>Static</code> \u2013 Rarely changed\u2022 <code>Dynamic</code> \u2013 Frequently changed\u2022 <code>Stream</code> \u2013 Always changed :ignoreLighting() Excludes this mesh from lighting calculations (not applicable in legacy rendering) :setParent(3DObject <code>other</code>) Parents this mesh to another 3D object :getAbsolutePosition() Vector3D Returns world position :getAbsoluteRotation() Vector3D Returns world rotation :getAbsoluteScale() Vector3D Returns world scale :updateAbsolutePosition() Updates world transform (non-recursive) :setAutomaticCulling(bool <code>enable</code>) Enables/disables auto-culling based on bounding box"},{"location":"api/classes/3d/meshbuffer.html","title":"MeshBuffer","text":"ConstructorsFunctions Function Description MeshBuffer.new() Creates an empty mesh buffer Function Returns Description :pushFace(Vector3D <code>vertex1</code>, Vector3D <code>vertex2</code>, Vector3D <code>vertex3</code>, Vector3D <code>normal1</code>, Vector3D <code>normal2</code>, Vector3D <code>normal3</code>, Vector2D <code>uvw1</code>, Vector2D <code>uvw2</code>, Vector2D <code>uvw3</code>, Vector4D <code>color1</code>, Vector4D <code>color2</code>, Vector4D <code>color3</code>) Appends a new triangular face to the mesh buffer :clear() Clears the data in the buffer :destroy() Destroys the buffer :getVertexCount() int Returns the number of vertices in the buffer"},{"location":"api/classes/3d/particlesystem.html","title":"ParticleSystem","text":"ConstructorsAlterablesFunctions Function Description ParticleSystem.new() Creates a new particle system Property Type Description .position Vector3D Particle system position .rotation Vector3D Particle system rotation .scale Vector3D Particle system scale .debug bool Enable/disable debug data .active bool Enable/disable updating .visible bool Set/get visibility Function Returns Description :destroy() Removes the particle system in Irrlicht :setParent(3DObject <code>other</code>) Parents this 3D object to another :getAbsolutePosition() Vector3D Returns world position :getAbsoluteRotation() Vector3D Returns world rotation :getAbsoluteScale() Vector3D Returns world scale :updateAbsolutePosition() Updates world transform (non-recursive) :setDoAbsoluteTracking(bool <code>enable</code>) Sets whether particles move relative to the object (default <code>true</code>) :loadMaterial(Material <code>material</code>) Loads material (Must apply before setting emitter!) :clearAffectors() Clears all applied affectors :clearParticles() Clears emitted particles :spark(int <code>particleAmount</code>) Emits <code>particleAmount</code> particles instantly :setEmitter(int <code>emitterType</code>, table <code>parameters</code>) Sets emitter type and parameters. See PARTICLE_EMITTER_TYPE. Global fields: <code>{ position = Vector3D, velocity = Vector3D, maxAngle = float, lifeTime = Vector2D, particlesPerSecond = Vector2D, minStartingColor = Vector4D, maxStartingColor = Vector4D, startSize = Vector2D }</code> Type-specific fields: <code>POINT (0)</code> \u2013 none, <code>CUBE (1)</code> \u2013 <code>{ minEdge = Vector3D, maxEdge = Vector3D }</code>, <code>SPHERE (2)</code> \u2013 <code>{ radius = float }</code>, <code>RING (3)</code> \u2013 <code>{ radius = float, thickness = float }</code> :addAffector(int <code>affectorType</code>, table <code>parameters</code>) Adds a particle affector. See PARTICLE_AFFECTOR_TYPE. <code>ATTRACT (0)</code> \u2013 <code>{ attractPosition = Vector3D, attractAxis = Vector3D }</code>, <code>FADE_OUT (1)</code> \u2013 <code>{ targetColor = Vector4D, time = float }</code>, <code>GRAVITY (2)</code> \u2013 <code>{ gravity = Vector3D, timeToTakeOver = float }</code>, <code>ROTATION (3)</code> \u2013 <code>{ rotationSpeed = Vector3D }</code>, <code>SCALE (4)</code> \u2013 <code>{ scalar = Vector2D }</code>"},{"location":"api/classes/3d/text3d.html","title":"Text3D","text":"ConstructorsAlterablesFunctions Function Description Text3D.new() Creates an empty 3D text object Text3D.new(String <code>text</code>) Creates a 3D text object with the given <code>text</code> Text3D.new(String <code>text</code>, String <code>fontName</code>) Creates a 3D text object with specified <code>text</code> and <code>fontName</code> Text3D.new(String <code>text</code>, Vector3D <code>position</code>) Creates a 3D text object with <code>text</code> at <code>position</code> Text3D.new(String <code>text</code>, Vector3D <code>position</code>, Vector4D <code>color</code>) Creates a 3D text object with <code>text</code>, <code>position</code>, and <code>color</code> Property Type Description .text String The displayed text .position Vector3D Position of the text .visible bool Whether the text is visible .textColor Vector4D Text color Function Returns Description :destroy() Destroys the object :setParent(3DObject <code>other</code>) Parents this object to another 3D object :getAbsolutePosition() Vector3D Returns world-space position :getAbsoluteRotation() Vector3D Returns world-space rotation :getAbsoluteScale() Vector3D Returns world-space scale :updateAbsolutePosition() Updates world transform (non-recursive)"},{"location":"api/classes/3d/trail.html","title":"Trail","text":"ConstructorsAlterablesFunctions Function Description Trail.new() Creates a new trail object Property Type Description .position Vector3D Trail position .rotation Vector3D Trail rotation .scale Vector3D Trail scale .visible bool Set/get visibility of the trail .debug bool Enable/disable debug data .shadows int Enable shadows (legacy only); see SHADOW_MODE .height float Set/get trail height .wind Vector3D Wind velocity .segments int Number of segments in trail .alignment int Trail axis alignment; see TRAIL_ALIGNMENT_TYPE .segmentLength float Fixed segment length; set to <code>0</code> to use dynamic length Function Returns Description :destroy() Removes the trail in Irrlicht :ignoreLighting() Excludes trail from lighting calculations permanently :loadMaterial(Material <code>material</code>) Loads the material :updateNormals(bool <code>enable</code>) If enabled, will update normals as well as vertex positions (may have no effect) :setParent(3DObject <code>other</code>) Parents this 3D object to another :getAbsolutePosition() Vector3D Returns world position :getAbsoluteRotation() Vector3D Returns world rotation :getAbsoluteScale() Vector3D Returns world scale :updateAbsolutePosition() Updates world transform (non-recursive)"},{"location":"api/classes/3d/water.html","title":"Water","text":"ConstructorsAlterablesFunctions Function Description Water.new() Creates a blank water object Water.new(Vector2D <code>tileSize</code>, Vector2D <code>tileCount</code>, Vector2D <code>textureRepeat</code>) Creates water with grid dimensions and texture scaling Water.new(Material <code>material</code>) Creates water using the given material Water.new(table <code>t</code>) Creates water from a table of values: { height = float, speed = float, length = float, tileSize = Vector2D, tileCount = Vector2D, textureRepeat = Vector2D, material = Material } Property Type Description .position Vector3D Water position .rotation Vector3D Water rotation .scale Vector3D Water scale .visible bool Whether water is visible .height float Height of waves .speed float Speed of waves .length float Length of waves .shadows int Enable shadows (legacy only); see SHADOW_MODE Function Returns Description :destroy() Destroys the water object :loadMaterial(Material <code>material</code>) Loads the given material :ignoreLighting() Disables lighting for this object :setParent(3DObject <code>other</code>) Parents this water object to another 3D object :getAbsolutePosition() Vector3D Returns world-space position :getAbsoluteRotation() Vector3D Returns world-space rotation :getAbsoluteScale() Vector3D Returns world-space scale :updateAbsolutePosition() Updates world transform (non-recursive)"},{"location":"api/modules/gui.html","title":"GUI","text":"Functions Function Returns Description GUI.ImportFont(String <code>path</code>) Imports a bitmap font from <code>path</code> GUI.SetDefaultFont(String <code>fontName</code>) Sets the default font for new GUI elements (must already be imported) GUI.SetBilinearFiltering(bool <code>enable</code>) Enables/disables bilinear filtering GUI.SetAnisotropicFiltering(bool <code>enable</code>) Enables/disables anisotropic filtering GUI.SetTrilinearFiltering(bool <code>enable</code>) Enables/disables trilinear filtering GUI.SetAntiAliasing(int <code>type</code>) Sets anti-aliasing mode; see ANTI_ALIASING_MODE GUI.Clear() Removes all GUI components in Irrlicht GUI.Queue() Queues GUI to render within the camera rendering queue"},{"location":"api/modules/input.html","title":"Input","text":"Invoked by EngineFunctions Function When Description Input.OnLeftMouseClick() On left click Left mouse click function Input.OnRightMouseClick() On right click Right mouse click function Input.OnMiddleMouseClick() On middle click Middle mouse click function Input.OnMouseMove(Vector2D <code>position</code>) On mouse move Mouse move function Input.OnMouseScroll(float <code>wheelDelta</code>) On scroll Mouse scroll function Input.OnKeyPressed(int <code>key</code>) On key press On key pressed function Input.OnKeyReleased(int <code>key</code>) On key release On key released function Function Returns Description Input.IsKeyDown(int <code>key</code>) bool Returns whether the key is currently pressed Input.GetMouseState() Lua table Returns <code>{ position = Vector2D, leftDown = bool, rightDown = bool, middleDown = bool, wheelDelta = float }</code> Input.GetMouseDelta() Vector2D Returns the change in mouse position Input.GetControllerState() Lua table Returns <code>{ axis = table, buttons = table }</code> Input.CheckControllers() Checks for connected/disconnected controllers Input.SetMouseVisibility(bool <code>visible</code>) Sets whether the mouse cursor is visible Input.SetMousePosition(Vector2D <code>position</code>) Sets the position of the mouse cursor"},{"location":"api/modules/lime.html","title":"Lime","text":"Invoked by EngineFunctions Function When Description Lime.OnStart() On startup following running <code>main.lua</code> The first function to be called by Lime Lime.OnUpdate(float <code>deltaTime</code>) Every frame Update function containing <code>deltaTime</code> Lime.OnEnd() On end of life The last function to be called by Lime <p>Note: Functions with a \u26a0\ufe0f must be invoked prior to window creation to take effect.</p> Function Returns Description Lime.GetVersion() String Returns the current Lime version running Lime.SetDriverType(int <code>type</code>) \u26a0\ufe0f Set driver type to use Lime.SetFullscreen(bool <code>fullscreen</code>) Set fullscreen or windowed mode Lime.SetMatchResolutionToSize(bool <code>match</code>) Sets whether or not the Irrlicht rendering resolution should match the size of the window Lime.SetCaption(String <code>caption</code>) Set window caption Lime.GetCaption() String Returns window caption text Lime.GetFrameRate() int Returns the current frame rate of the application Lime.SetFrameRate(int <code>fps</code>) Sets the target frame rate Lime.GetMemoryUsage() float Returns application memory usage in megabytes Lime.SetWindowPosition(Vector2D <code>position</code>) Set window position Lime.SetWindowSize(Vector2D <code>size</code>) Set size of the application Lime.SetAutoAspectRatio(bool <code>enable</code>) Set whether or not Lime mains aspect ratio when resized Lime.GetWindowSize() Vector2D Returns the size of the render window Lime.GetMonitorSize() Vector2D Returns the size of the user's monitor Lime.EndApplication() Ends the application Lime.IsWindowFocused() bool Returns whether the window is focused Lime.SetResizable(bool <code>allow</code>) Sets whether the application should be resizable Lime.GetElapsedTime() int Returns elapsed runtime in milliseconds Lime.Log(String <code>message</code>) Sends a message to the debug console Lime.AddArchiveToMemory(String <code>path</code>) Adds archive from <code>path</code> to memory Lime.SetShowConsole(bool <code>show</code>) \u26a0\ufe0f Shows console Lime.SetWriteConsole(bool <code>write</code>) Writes console output to <code>output.txt</code> Lime.SetVSync(bool <code>enable</code>) \u26a0\ufe0f Enables/disables vertical sync (Irrlicht cannot update v-sync at runtime, but a workaround may be explored in the future) Lime.DisplayMessage(String <code>title</code>, String <code>message</code>, int <code>icon</code>) Displays a Windows pop-up message; see MESSAGE_ICON Lime.GetCommandLine(String <code>command</code>) String Returns commandline value. If just the command exists with no value, it will return <code>true</code>. Example: <code>Lime.exe hello world</code> -&gt; world, <code>Lime.exe -\"hello world\" hi</code> -&gt; hi Lime.RecreateDevice() Applies any window changes such as a change in driver type and creates a new window (Currently crashes)"},{"location":"api/modules/networkclient.html","title":"NetworkClient","text":"<p>Note: Peers do not receive information about other peers unless the server explicitly provides it. Clients do not receive <code>OnClientConnect</code> or <code>OnClientDisconnect</code> callbacks.</p> Functions Function Returns Description NetworkClient.Initialize() Initializes the ENet library (shared with server) NetworkClient.SetVerbose(bool <code>enable</code>) Enables/disables verbose logging (shared with server) NetworkClient.Create(int <code>maxConnections</code>, int <code>maxChannels</code>) Creates a networking client with max allowed outgoing connections and channels (<code>maxChannels</code> must match server\u2019s) NetworkClient.Destroy() Destroys the client NetworkClient.Connect(String <code>IP</code>, int <code>port</code>, int <code>channelCount</code>) Attempts to connect to a server at <code>IP:port</code> using <code>channelCount</code> channels (uses min of client/server channel count) On success: <code>NetworkClient.OnConnect()</code> On failure: <code>NetworkClient.OnConnectFail()</code> Server receives: <code>NetworkServer.OnClientConnect(int peerID, int hostAddress)</code> NetworkClient.Disconnect() Disconnects the client Triggers: <code>NetworkClient.OnDisconnect(int reasonCode)</code> Server receives: <code>NetworkServer.OnClientDisconnect(int peerID, int hostAddress)</code> NetworkClient.IsConnected() bool Returns whether the client is connected to a server NetworkClient.SendPacketToPeer(int <code>peerID</code>, int <code>channel</code>, Packet <code>packet</code>, bool <code>TCP</code>) Sends <code>packet</code> to a specific peer on specified channel via UDP/TCP NetworkClient.SendPacketToServer(int <code>channel</code>, Packet <code>packet</code>, bool <code>TCP</code>) Sends <code>packet</code> to the server on specified channel via UDP/TCP Server receives: <code>NetworkServer.OnPacketReceived(int channel, [Packet][packet] packet)</code>"},{"location":"api/modules/networkserver.html","title":"NetworkServer","text":"Functions Function Returns Description NetworkServer.Initialize() Initializes the ENet library (shared with client) NetworkServer.SetVerbose(bool <code>enable</code>) Enables/disables verbose logging (shared with client) NetworkServer.Host(String <code>IP</code>, int <code>port</code>, int <code>maxPeers</code>, int <code>maxChannels</code>) Attempts to host on <code>IP:port</code> with <code>maxPeers</code> and <code>maxChannels</code> channels (0\u2013maxChannels) On success: <code>NetworkServer.OnHosted()</code> On failure: <code>NetworkServer.OnHostFail()</code> NetworkServer.IsHosting() bool Returns whether the server is currently hosting NetworkServer.StopHosting() Stops the hosted server NetworkServer.GetIP() String Returns the IP address of the hosted server NetworkServer.GetPort() int Returns the port of the hosted server NetworkServer.SetBandwidthLimits(int <code>incomingLimit</code>, int <code>outgoingLimit</code>) Sets bandwidth limits in bytes/sec (0 = unlimited) NetworkServer.Shutdown() Shuts down ENet and disconnects from all peers NetworkServer.GetPeerState(int <code>peerID</code>) int Returns state of peer; see PEER_STATE NetworkServer.GetPeerPing(int <code>peerID</code>) int Returns ping time of peer in milliseconds NetworkServer.DisconnectPeer(int <code>peerID</code>, int <code>reasonCode</code>) Forcefully disconnects peer with <code>reasonCode</code> Client receives: <code>NetworkClient.OnDisconnect(int reasonCode)</code> NetworkServer.SendPacketToPeer(int <code>peerID</code>, int <code>channel</code>, Packet <code>packet</code>, bool <code>TCP</code>) Sends <code>packet</code> to a peer over specified channel and protocol Client receives: <code>NetworkClient.OnPacketReceived(int channel, [Packet][packet] packet)</code> NetworkServer.SendPacketToAll(int <code>channel</code>, Packet <code>packet</code>, bool <code>TCP</code>) Sends <code>packet</code> to all peers on the specified channel Clients receive: <code>NetworkClient.OnPacketReceived(int channel, [Packet][packet] packet)</code>"},{"location":"api/modules/sound.html","title":"Sound","text":"<p>\u26a0\ufe0f IrrKlang will be replaced with a new sound library, which will make major changes to how Lime handles sound in the near future.</p> Functions Function Returns Description Sound.PlaySound2D(String <code>path</code>, bool <code>loop</code>) int Plays a 2D sound and returns the channel used Sound.PlaySound3D(String <code>path</code>, Vector3D <code>position</code>, bool <code>loop</code>) int Plays a 3D sound and returns the channel used Sound.PlaySound2DOnChannel(int <code>channel</code>, String <code>path</code>, bool <code>loop</code>) Plays a 2D sound on a specific channel Sound.PlaySound3DOnChannel(int <code>channel</code>, String <code>path</code>, Vector3D <code>position</code>, bool <code>loop</code>) Plays a 3D sound on a specific channel Sound.StopChannel(int <code>channel</code>) Stops the sound on the specified channel Sound.StopAllChannels() Stops all currently playing sounds Sound.SetChannelPaused(int <code>channel</code>, bool <code>pause</code>) Pauses or resumes the channel Sound.SetChannelLooped(int <code>channel</code>, bool <code>loop</code>) Sets whether the channel loops Sound.PreloadSound(String <code>path</code>) Preloads the sound file into memory Sound.SetListenerPosition(Vector3D <code>position</code>, Vector3D <code>forward</code>) Sets 3D listener position and forward direction Sound.SetChannelPosition3D(int <code>channel</code>, Vector3D <code>position</code>) Sets 3D position of a sound on the channel Sound.SetChannelMinimumDistance(int <code>channel</code>, float <code>distance</code>) Sets minimum distance for full volume on a 3D sound Sound.ClearChannelEffects(int <code>channel</code>) Removes all effects applied to the channel Sound.SetChannelEffect(int <code>channel</code>, int <code>effect</code>, bool <code>enable</code>, table <code>parameters</code>) Enables/disables a sound effect, see SOUND_EFFECT.<code>DISTORTION</code> \u2013 <code>{ gain = float, edge = float }</code><code>ECHO</code> \u2013 <code>{ wetDry = float, feedback = float, delay = float }</code><code>REVERB</code> \u2013 <code>{ inputGain = float, reverbMix = float, reverbTime = float, frequencyRatio = float }</code><code>PARAMEQ</code> \u2013 <code>{ frequency = float, bandwidth = float, gain = float }</code><code>GARGLE</code> \u2013 <code>{ rate = float, sinusWaveForm = bool }</code> Sound.SetChannelVolume(int <code>channel</code>, int <code>volume</code>) Sets the volume of the channel Sound.SetChannelPitch(int <code>channel</code>, float <code>pitch</code>) Sets the pitch of the sound Sound.SetChannelPan(int <code>channel</code>, float <code>pan</code>) Sets the stereo pan of the sound Sound.GetChannelList() Lua table Returns <code>{ [channelID] = soundPath }</code> Sound.SetChannelPlaybackSpeed(int <code>channel</code>, float <code>speed</code>) Sets playback speed for the channel Sound.SetChannelPlaybackPosition(int <code>channel</code>, int <code>milliseconds</code>) Seeks to a position in milliseconds Sound.SetChannelVelocity(int <code>channel</code>, Vector3D <code>velocity</code>) Sets velocity for Doppler effect Sound.SetDopplerEffectParameters(float <code>dopplerFactor</code>, float <code>distanceFactor</code>) Sets Doppler effect parameters. <code>dopplerFactor</code> ranges <code>0.0\u201310.0</code> (default <code>1.0</code>), <code>distanceFactor</code> defines meters per unit (default <code>1.0</code>; use <code>0.3048</code> for feet/sec) Sound.IsChannelEmpty(int <code>channel</code>) bool Returns true if no sound is playing on the channel"},{"location":"api/modules/world.html","title":"World","text":"Functions <p>Note: Functions with a \u26a0\ufe0f must be invoked prior to window creation to take effect.</p> Function Returns Description World.SetSkydome(Texture <code>sky</code>) Sets the texture of the skydome World.SetSkydomeParameters(int <code>resX</code>, int <code>resY</code>, float <code>texturePercent</code>, float <code>spherePercent</code>, float <code>radius</code>) Sets additional skydome parameters World.SetBackgroundColor(Vector4D <code>color</code>) Sets world background color World.GetObjectCount() int Returns number of Irrlicht objects in the world World.FireRaypick3D(Vector3D <code>start</code>, Vector3D <code>end</code>, float <code>debugLifeTime</code>) Lua table Fires a ray from start to end. Returns: <code>{ ID = int, normal = Vector3D, materialID = int, hitPosition = Vector3D }</code>. On failure: IDs = -1, normal = upward vector, hitPosition = <code>end</code> World.FireRaypick2D(Vector2D <code>screenCoord</code>, Vector3D <code>end</code>) Lua table Fires a ray from screen space to 3D world position. Return is identical to <code>FireRaypick3D</code> World.SetFogDistances(Vector2D <code>distances</code>) Sets fog start and end distances World.SetFogColor(Vector4D <code>color</code>) Sets fog color World.SetFogDensity(float <code>density</code>) Sets fog density World.SetFogType(int <code>type</code>) Sets fog type World.SetPixelFog(bool <code>enable</code>) Enables per-pixel fog World.SetRangeFog(bool <code>enable</code>) Enables range-based fog (more expensive) World.SetFogParameters(Vector2D <code>distances</code>, Vector4D <code>color</code>, int <code>type</code>, float <code>density</code>, bool <code>doPixelFog</code>, bool <code>doRangeFog</code>) Sets all fog parameters in one call World.SetAmbientColor(Vector4D <code>color</code>) Sets ambient lighting color World.ConvertToScreenPosition(Vector3D <code>position</code>) Vector2D Converts 3D world position to 2D screen position World.SetShadows(bool <code>enable</code>) \u26a0\ufe0f Enables or disables shadows World.GetRenderTexture(Camera <code>camera</code>, Vector2D <code>size</code>, bool <code>renderGUI</code>) Texture Returns a texture of the camera\u2019s view of the scene with optional GUI rendering World.Clear(bool <code>wipeCaches</code>) Removes all 3D components; if <code>wipeCaches</code> is true, clears all mesh caches World.SetDefaultShadowFiltering(int <code>mode</code>) Sets default shadow filtering; see SHADOW_FILTER_SAMPLING World.SetDefaultShadowResolution(int <code>res</code>) Sets default shadow resolution; see SHADOW_RESOLUTION World.SetDefaultLightingExclusion(bool <code>exclude</code>) Sets whether new objects are excluded from lighting World.PreloadMesh(String <code>filePath</code>) Preloads a mesh from file path World.PreloadTexture(String <code>filePath</code>) Preloads a texture from file path World.UnloadMesh(String <code>filePath</code>) Frees memory for a mesh from cache World.UnloadTexture(String <code>filePath</code>) Frees memory for a texture from cache World.SetLegacyDrawing(bool <code>enable</code>) If enabled, xEffects lighting and shadows are ignored World.SetShadowColor(Vector4D <code>color</code>) Sets legacy shadow color World.SetShadowOpacity(int <code>opacity</code>) Sets legacy shadow opacity World.SetLightManagementMode(int <code>mode</code>) Sets light management mode; see LIGHT_MANAGEMENT_MODE:\u2022 <code>Distance to Camera</code> \u2013 default; closest 8 lights to camera\u2022 <code>Nearest to Object</code> \u2013 3 closest to object\u2022 <code>Zone</code> \u2013 lights only affect objects under the same <code>Empty</code>"},{"location":"news/20250807_1-0-0-beta-1.html","title":"20250807 1 0 0 beta 1","text":""},{"location":"news/20250807_1-0-0-beta-1.html#release-100-beta1","title":"Release 1.0.0-beta.1","text":"Posted August 7th, 2025 <p>This beta release reorganizes some module functions and reworks the window for better general functionality.</p> <ul> <li>Added Lime.GetVersion, which retrieves the version of Lime running.</li> <li>Moved some World functions to Lime:  <ul> <li>Lime.GetFrameRate</li> <li>Lime.SetFrameRate</li> <li>Lime.GetMemoryUsage</li> </ul> </li> <li>Reworked Lime.SetWindowSize to work post-window creation, resizes from center.</li> <li>Added Lime.SetMatchResolutionToSize which enables/disables matching the Irrlicht rendering resolution to the window size on resizing, defaulting to <code>true</code>.</li> <li>Maximizing the Lime window now fully covers the screen, with the top bar and task bar hidden.</li> <li>Added Lime.SetAutoAspectRatio, which locks the window's aspect ratio on resize if enabled.</li> <li>Added Input.GetMouseDelta, which returns the physical change in mouse position since the last frame, disregarding Input.SetMousePosition.</li> </ul>"}]}